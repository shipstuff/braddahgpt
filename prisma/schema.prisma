// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Your app models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?  // nullable for OAuth users
  image     String?  // profile picture URL
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  accounts  Account[]
  chats     Chat[]
  
  @@map("users")
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      Role     // USER or ASSISTANT
  chatId    String
  createdAt DateTime @default(now())
  
  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

enum Role {
  USER
  ASSISTANT
}
